#!/bin/bash -e

echo
echo "=== Mikhail Nuzhin setting IKEv2-setup in Docker ==="
echo


function exit_badly {
  echo "$1"
  exit 1
}

IP=$(dig -4 +short myip.opendns.com @resolver1.opendns.com)

echo
echo "External IP: ${IP}"
echo

echo "*** This hostname must already resolve to this machine ***"
read -r -p "Hostname for VPN: " VPNHOST

VPNHOSTIP=$(dig -4 +short "${VPNHOST}")
[[ -n "$VPNHOSTIP" ]] || exit_badly "Cannot resolve VPN hostname: aborting"

if [[ "${IP}" != "${VPNHOSTIP}" ]]; then
  echo "Warning: ${VPNHOST} resolves to ${VPNHOSTIP}, not ${IP}"
  echo "Either you're behind NAT, or something is wrong (e.g. hostname points to wrong IP, CloudFlare proxying shenanigans, ...)"
  read -r -p "Press [Return] to continue anyway, or Ctrl-C to abort"
fi

read -r -p "VPN username: " VPNUSERNAME
while true; do
  read -r -s -p "VPN password (no quotes, please): " VPNPASSWORD
  echo
  read -r -s -p "Confirm VPN password: " VPNPASSWORD2
  echo
  [[ "${VPNPASSWORD}" = "${VPNPASSWORD2}" ]] && break
  echo "Passwords didn't match -- please try again"
done

echo '
Public DNS servers include:

176.103.130.130,176.103.130.131  AdGuard               https://adguard.com/en/adguard-dns/overview.html
176.103.130.132,176.103.130.134  AdGuard Family        https://adguard.com/en/adguard-dns/overview.html
1.1.1.1,1.0.0.1                  Cloudflare/APNIC      https://1.1.1.1
84.200.69.80,84.200.70.40        DNS.WATCH             https://dns.watch
8.8.8.8,8.8.4.4                  Google                https://developers.google.com/speed/public-dns/
208.67.222.222,208.67.220.220    OpenDNS               https://www.opendns.com
208.67.222.123,208.67.220.123    OpenDNS FamilyShield  https://www.opendns.com
9.9.9.9,149.112.112.112          Quad9                 https://quad9.net
77.88.8.8,77.88.8.1              Yandex                https://dns.yandex.com
77.88.8.88,77.88.8.2             Yandex Safe           https://dns.yandex.com
77.88.8.7,77.88.8.3              Yandex Family         https://dns.yandex.com
'

read -r -p "DNS servers for VPN users (default: 176.103.130.130,176.103.130.131): " VPNDNS
VPNDNS=${VPNDNS:-'176.103.130.130,176.103.130.131'}

grep -Fq 'MikhailNuzhin' ikev2/conf/ipsec.conf || echo "# strongSwan IPsec configuration file

config setup
  strictcrlpolicy=yes
  uniqueids=never

conn roadwarrior
  auto=add
  compress=no
  type=tunnel
  keyexchange=ikev2
  fragmentation=yes
  forceencaps=yes

  ike=aes256gcm16-prfsha384-ecp384,aes256-aes128-sha256-sha1-modp2048-modp4096-modp1024!
  esp=aes256gcm16-ecp384,aes128-aes256-sha1-sha256-modp2048-modp4096-modp1024!

  dpdaction=clear
  dpddelay=300s
  rekey=no
  left=%any
  leftid=@${VPNHOST}
  leftcert=cert.pem
  leftsendcert=always
  leftsubnet=0.0.0.0/0
  right=%any
  rightid=%any
  rightauth=eap-mschapv2
  eap_identity=%any
  rightdns=${VPNDNS}
  rightsourceip=10.101.0.0/16
  rightsendcert=never
" > ikev2/conf/ipsec.conf

grep -Fq 'MikhailNuzhin' ikev2/conf/ipsec.secrets || echo "# strongSwan IPsec secrets file

${VPNHOST} : RSA \"privkey.pem\"
${VPNUSERNAME} : EAP \"${VPNPASSWORD}\"
" > ikev2/conf/ipsec.secrets

grep -Fq 'MikhailNuzhin' ikev2/bin/run || echo "# Startup file strongSwan
!/bin/bash

iptables -P INPUT   ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT  ACCEPT
iptables -F
iptables -t nat -F
iptables -t mangle -F
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state INVALID -j DROP
iptables -I INPUT -i eth0 -m state --state NEW -m recent --set
iptables -I INPUT -i eth0 -m state --state NEW -m recent --update --seconds 300 --hitcount 60 -j DROP
iptables -A INPUT -p udp --dport  500 -j ACCEPT
iptables -A INPUT -p udp --dport 4500 -j ACCEPT
iptables -A FORWARD --match policy --pol ipsec --dir in  --proto esp -s 10.101.0.0/16 -j ACCEPT
iptables -A FORWARD --match policy --pol ipsec --dir out --proto esp -d 10.101.0.0/16 -j ACCEPT
iptables -t mangle -A FORWARD --match policy --pol ipsec --dir in -s 10.101.0.0/16 -o eth0 -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360
iptables -t nat -A POSTROUTING -s 10.101.0.0/16 -o eth0 -m policy --pol ipsec --dir out -j ACCEPT  # exempt IPsec traffic from masquerading
iptables -t nat -A POSTROUTING -s 10.101.0.0/16 -o eth0 -j MASQUERADE
iptables -A INPUT   -j DROP
iptables -A FORWARD -j DROP

ln -f -s "/etc/letsencrypt/live/${VPNHOST}/cert.pem"    /etc/ipsec.d/certs/cert.pem
ln -f -s "/etc/letsencrypt/live/${VPNHOST}/privkey.pem" /etc/ipsec.d/private/privkey.pem
ln -f -s "/etc/letsencrypt/live/${VPNHOST}/chain.pem"   /etc/ipsec.d/cacerts/chain.pem

/usr/sbin/ipsec start --nofork
" >  ikev2/bin/run

mkdir -p ~/ikev2/connect

echo
echo "--- How to connect ---"
echo
echo "Connection instructions can be found in your home directory, '~/ikev2/connect'"

echo
echo "--- Build dokcaer image ---"
echo

docker build -t mn/ikev2:v4 -f ~/ikev2/dockerfile .

echo
echo "--- Run docker container ---"
echo

docker-compose -f ~/ikev2/docker-compose.yml up -d
